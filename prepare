Main Activity:
package com.example.encryptednote

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import javax.crypto.Cipher
import javax.crypto.KeyGenerator
import javax.crypto.SecretKey

class MainActivity : AppCompatActivity() {
    private lateinit var inputText: EditText
    private lateinit var resultText: TextView
    private lateinit var secretKey: SecretKey

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        inputText = findViewById(R.id.inputText)
        resultText = findViewById(R.id.resultText)
        val encryptButton: Button = findViewById(R.id.encryptButton)
        val decryptButton: Button = findViewById(R.id.decryptButton)

        encryptButton.setOnClickListener {
            val data = inputText.text.toString()
            secretKey = generateKey()
            val encryptedData = encrypt(data, secretKey)
            resultText.text = "Encrypted: ${ByteArrayToHexString(encryptedData)}"
        }

        decryptButton.setOnClickListener {
            val encryptedDataHex = inputText.text.toString()
            val encryptedData = HexStringToByteArray(encryptedDataHex)
            val decryptedData = decrypt(encryptedData, secretKey)
            resultText.text = "Decrypted: $decryptedData"
        }
    }

    private fun generateKey(): SecretKey {
        val keyGenerator = KeyGenerator.getInstance("AES")
        return keyGenerator.generateKey()
    }

    private fun encrypt(data: String, secretKey: SecretKey): ByteArray {
        val cipher = Cipher.getInstance("AES")
        cipher.init(Cipher.ENCRYPT_MODE, secretKey)
        return cipher.doFinal(data.toByteArray())
    }

    private fun decrypt(encryptedData: ByteArray, secretKey: SecretKey): String {
        val cipher = Cipher.getInstance("AES")
        cipher.init(Cipher.DECRYPT_MODE, secretKey)
        val decryptedData = cipher.doFinal(encryptedData)
        return String(decryptedData)
    }

    private fun ByteArrayToHexString(bytes: ByteArray): String {
        val hexChars = CharArray(bytes.size * 2)
        for (i in bytes.indices) {
            val v = bytes[i].toInt() and 0xFF
            hexChars[i * 2] = "0123456789ABCDEF"[v ushr 4]
            hexChars[i * 2 + 1] = "0123456789ABCDEF"[v and 0x0F]
        }
        return String(hexChars)
    }

    private fun HexStringToByteArray(hexString: String): ByteArray {
        val len = hexString.length
        val data = ByteArray(len / 2)
        var i = 0
        while (i < len) {
            data[i / 2] = ((Character.digit(hexString[i], 16) shl 4) + Character.digit(hexString[i + 1], 16)).toByte()
            i += 2
        }
        return data
    }
}


activity_main.xml:

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <EditText
        android:id="@+id/inputText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="90dp"
        android:hint="Enter text" />

    <Button
        android:id="@+id/encryptButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/inputText"
        android:layout_marginTop="123dp"
        android:text="Encrypt" />

    <Button
        android:id="@+id/decryptButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/encryptButton"
        android:layout_marginTop="0dp"
        android:text="Decrypt" />

    <EditText
        android:id="@+id/resultText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/decryptButton"
        android:layout_marginTop="76dp"
        android:paddingTop="20dp" />
</RelativeLayout>

gudehqwdqkw

package com.example.deviceinfo

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.annotation.SuppressLint
import android.os.Build
import android.provider.Settings
import android.widget.TextView

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val tvDisplay: TextView = findViewById(R.id.tv_displayInfo)
        tvDisplay.text = getSystemDetail()
    }

    @SuppressLint("HardwareIds")
    private fun getSystemDetail(): String {
        return "Brand: ${Build.BRAND} \n" +
                "DeviceID: ${
                    Settings.Secure.getString(
                        contentResolver,
                        Settings.Secure.ANDROID_ID
                    )
                } \n" +
                "Model: ${Build.MODEL} \n" +
                "ID: ${Build.ID} \n" +
                "SDK: ${Build.VERSION.SDK_INT} \n" +
                "Manufacture: ${Build.MANUFACTURER} \n" +
                "Brand: ${Build.BRAND} \n" +
                "User: ${Build.USER} \n" +
                "Type: ${Build.TYPE} \n" +
                "Base: ${Build.VERSION_CODES.BASE} \n" +
                "Incremental: ${Build.VERSION.INCREMENTAL} \n" +
                "Board: ${Build.BOARD} \n" +
                "Host: ${Build.HOST} \n" +
                "FingerPrint: ${Build.FINGERPRINT} \n" +
                "Version Code: ${Build.VERSION.RELEASE}"
    }

}




This Android app, named "EncryptedNote," allows users to encrypt and decrypt text using the AES encryption algorithm. Here's a breakdown of the code:

1. **Layout Setup:**
   - The layout is defined in an XML file (probably `res/layout/activity_main.xml`).
   - It includes an `EditText` for input, a `TextView` to display results, and two `Button`s for encryption and decryption.

2. **Variable Initialization:**
   - The `MainActivity` class extends `AppCompatActivity`.
   - Three private variables are declared: `inputText` (EditText), `resultText` (TextView), and `secretKey` (SecretKey).

3. **onCreate Method:**
   - Initializes the layout using `setContentView`.
   - Retrieves references to UI elements (EditText, TextView, Buttons).
   - Sets up click listeners for the "Encrypt" and "Decrypt" buttons.

4. **Encrypt Button Click Listener:**
   - When the "Encrypt" button is clicked, it reads the input text, generates a secret key, encrypts the input data using AES, and displays the encrypted result in the TextView.

5. **Decrypt Button Click Listener:**
   - When the "Decrypt" button is clicked, it reads the input (assumed to be a hex-encoded encrypted string), converts it to a byte array, decrypts using the AES algorithm, and displays the decrypted result in the TextView.

6. **Key Generation:**
   - The `generateKey` function initializes a KeyGenerator for AES and generates a new secret key.

7. **Encryption and Decryption Functions:**
   - `encrypt` and `decrypt` functions use the AES cipher to perform encryption and decryption, respectively.

8. **Hex Conversion Functions:**
   - `ByteArrayToHexString` converts a byte array to a hex-encoded string.
   - `HexStringToByteArray` converts a hex-encoded string to a byte array.

The app follows a basic flow: input text, encrypt, display result; or input encrypted text, decrypt, display result. It uses the AES algorithm for encryption and decryption, and it converts byte arrays to hex strings for display and input purposes.
