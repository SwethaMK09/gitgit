my media playlist application:
MainActivity.kt:
package com.example.playlistmediaapp

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import androidx.activity.ComponentActivity


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val getStartedButton: Button = findViewById(R.id.getStartedButton)

        getStartedButton.setOnClickListener {
            val intent = Intent(this, MusicActivity::class.java)
            startActivity(intent)
        }
    }
}


MusicActivity.kt:
package com.example.playlistmediaapp

import android.annotation.SuppressLint
import android.content.Intent
import android.media.MediaPlayer
import android.os.Bundle
import android.widget.Button
import androidx.activity.ComponentActivity


class MusicActivity : ComponentActivity() {
    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_playlist)

        val mediaPlayer1: MediaPlayer = MediaPlayer.create(applicationContext, R.raw.music1)
        val mediaPlayer2: MediaPlayer = MediaPlayer.create(applicationContext, R.raw.music2)

        val playButton: Button = findViewById(R.id.playButton)
        val pauseButton: Button = findViewById(R.id.pauseButton)
        val stopButton: Button = findViewById(R.id.stopButton)

        val playButton1: Button = findViewById(R.id.playButton1)
        val pauseButton1: Button = findViewById(R.id.pauseButton1)
        val stopButton1: Button = findViewById(R.id.stopButton1)

        playButton.setOnClickListener {
            mediaPlayer1.start()
        }

        pauseButton.setOnClickListener {
            mediaPlayer1.pause()
        }

        stopButton.setOnClickListener {
            mediaPlayer1.stop()
            mediaPlayer1.prepare()
        }

        playButton1.setOnClickListener {
            mediaPlayer2.start()
        }

        pauseButton1.setOnClickListener {
            mediaPlayer2.pause()
        }

        stopButton1.setOnClickListener {
            mediaPlayer2.stop()
            mediaPlayer2.prepare()
        }
        val backButton: Button = findViewById(R.id.backButton)

        backButton.setOnClickListener {
            val intent = Intent(this, MainActivity::class.java)
            startActivity(intent)
        }
    }
}

activity.main.xml:
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity"
    tools:ignore="HardcodedText"
    android:background="@android:color/holo_orange_light">

    <TextView
        android:id="@+id/headingText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="32dp"
        android:text="MEDIA PLAYER"
        android:textSize="30sp"
        android:textStyle="bold" />

    <ImageView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="10dp"
        android:layout_marginVertical="40dp"
        android:src="@drawable/img" />

    <Button
        android:id="@+id/getStartedButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerHorizontal="true"
        android:layout_below="@id/ImageViewId"
        android:layout_marginVertical="600dp"
        android:text="GET STARTED"
        android:textColor="@android:color/black"
        android:textStyle="bold"
        android:backgroundTint="@color/white"
        tools:ignore="UnknownId" />

</RelativeLayout>

activity_playlist.xml:
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:background="@android:color/holo_orange_light">


    <!-- Music 1 -->
    <ImageView
        android:layout_width="359dp"
        android:layout_height="428dp"
        android:layout_marginHorizontal="20dp"
        android:src="@drawable/img" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center_vertical">

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Music 1"
            android:layout_marginLeft="15dp"
            android:textSize="20sp"
            android:textStyle="bold"/>


        <Button
            android:id="@+id/playButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:backgroundTint="@color/white"
            android:text="PLAY"
            android:textColor="@android:color/black"
            android:textStyle="bold"/>

        <Button
            android:id="@+id/pauseButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:backgroundTint="@color/white"
            android:text="PAUSE"
            android:textColor="@android:color/black"
            android:textStyle="bold" />

        <Button
            android:id="@+id/stopButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:backgroundTint="@color/white"
            android:text="STOP"
            android:textColor="@android:color/black"
            android:textStyle="bold" />

    </LinearLayout>
    <!-- Music 2 -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center_vertical">
        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Music 2"
            android:layout_marginLeft="15dp"
            android:textSize="20sp"
            android:textStyle="bold"
            />
        <Button
            android:id="@+id/playButton1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:backgroundTint="@color/white"
            android:text="PLAY"
            android:textColor="@android:color/black"
            android:textStyle="bold" />

        <Button
            android:id="@+id/pauseButton1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:backgroundTint="@color/white"
            android:text="PAUSE"
            android:textColor="@android:color/black"
            android:textStyle="bold" />
        <Button
            android:id="@+id/stopButton1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:backgroundTint="@color/white"
            android:text="STOP"
            android:textColor="@android:color/black"
            android:textStyle="bold" />
    </LinearLayout>
    <Button
        android:id="@+id/backButton"
        android:layout_width="127dp"
        android:layout_height="54dp"
        android:text="GO BACK"
        android:layout_marginHorizontal="135dp"
        android:layout_marginVertical="50dp"
        android:backgroundTint="@color/white"
        android:textColor="@android:color/black"
        android:textStyle="bold" />
</LinearLayout>

AndroidManifest:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.PACKAGE_USAGE_STATS" tools:ignore="ProtectedPermissions" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.PlaylistMediaApp"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity2"
            android:exported="false"
            android:label="@string/title_activity_main2"
            android:theme="@style/Theme.PlaylistMediaApp" />
        <activity
            android:name=".MusicActivity"
            android:exported="false"
            android:label="@string/title_activity_music"
            android:theme="@style/Theme.PlaylistMediaApp" />
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.PlaylistMediaApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>






hgaga


package com.example.playlistmediaapp

import android.annotation.SuppressLint
import android.content.Intent
import android.media.MediaPlayer
import android.os.Bundle
import android.os.PowerManager
import android.widget.Button
import androidx.activity.ComponentActivity

class MusicActivity : ComponentActivity() {
    private lateinit var mediaPlayer1: MediaPlayer
    private lateinit var mediaPlayer2: MediaPlayer
    private lateinit var wakeLock: PowerManager.WakeLock

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_playlist)

        val powerManager = getSystemService(POWER_SERVICE) as PowerManager
        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "MyMediaPlayer::WakelockTag")

        mediaPlayer1 = MediaPlayer.create(applicationContext, R.raw.music1)
        mediaPlayer2 = MediaPlayer.create(applicationContext, R.raw.music2)

        // Your existing button references...
        // ...

        playButton.setOnClickListener {
            mediaPlayer1.start()
            acquireWakeLock()
        }

        pauseButton.setOnClickListener {
            mediaPlayer1.pause()
            releaseWakeLock()
        }

        stopButton.setOnClickListener {
            mediaPlayer1.stop()
            mediaPlayer1.prepare()
            releaseWakeLock()
        }

        playButton1.setOnClickListener {
            mediaPlayer2.start()
            acquireWakeLock()
        }

        pauseButton1.setOnClickListener {
            mediaPlayer2.pause()
            releaseWakeLock()
        }

        stopButton1.setOnClickListener {
            mediaPlayer2.stop()
            mediaPlayer2.prepare()
            releaseWakeLock()
        }

        backButton.setOnClickListener {
            val intent = Intent(this, MainActivity::class.java)
            startActivity(intent)
        }
    }

    private fun acquireWakeLock() {
        if (!wakeLock.isHeld) {
            wakeLock.acquire()
        }
    }

    private fun releaseWakeLock() {
        if (wakeLock.isHeld) {
            wakeLock.release()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        // Release wakelock when the activity is destroyed
        releaseWakeLock()
    }
}



nanannana


package com.example.wakelockmonitor

import android.os.Build
import android.os.Bundle
import android.os.PowerManager
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val powerManager = getSystemService(POWER_SERVICE) as PowerManager

        // Check if the API level supports wakelock statistics
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            val wakelockStats = powerManager.getWakelockStats()
            
            // Process and display wakelock statistics
            val statsTextView: TextView = findViewById(R.id.statsTextView)
            statsTextView.text = processAndDisplayStats(wakelockStats)
        } else {
            // Handle the case where wakelock statistics are not supported
            val statsTextView: TextView = findViewById(R.id.statsTextView)
            statsTextView.text = "Wakelock statistics not supported on this device."
        }
    }

    private fun processAndDisplayStats(wakelockStats: Map<String, PowerManager.WakeLock>): String {
        // Process wakelockStats and format it as needed
        // For example, iterate through the map and build a formatted string
        val statsStringBuilder = StringBuilder()

        for ((wakelockTag, wakelock) in wakelockStats) {
            statsStringBuilder.append("Wakelock Tag: $wakelockTag\n")
            statsStringBuilder.append("Time Held: ${wakelock.totalTime / 1000} seconds\n")
            statsStringBuilder.append("--------------------------------\n")
        }

        return statsStringBuilder.toString()
    }
}


<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/statsTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:text="Wakelock Statistics will be displayed here."
        android:textSize="18sp" />

</RelativeLayout>
