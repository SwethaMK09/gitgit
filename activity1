Custom Android Emulator
Implement custom hardware profiles in the AVD Manager.
Create emulator instances with unique specifications (screen size, RAM, CPU).
Test app responsiveness on various virtual devices.
 
Android App Localization
Localize an Android app for multiple languages to cater to a global audience.
Implement language-specific resource files for strings, layouts, and images.
Use the Locale class to dynamically switch between languages.
Test the app on emulators with different language settings.
 
SecureNote - Encrypted Note-Taking App
Implement user authentication and authorization.
Encrypt and decrypt note content using cryptographic algorithms.
Store encrypted notes securely on the device.
 
Android System Monitor
Utilize Android's system APIs to gather CPU usage, memory stats, and battery status.
Display information using graphical elements and charts.
Implement notifications for critical system events.
 
Android Device Information App
Retrieve device details such as model, OS version, screen resolution, etc.
Display hardware information and available sensors.
Allow users to share device information.


nsnnsns

import android.content.Context
import android.content.res.Configuration
import android.os.Build
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import java.util.*

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Example: Switch to Spanish
        setLocale("es")
    }

    private fun setLocale(languageCode: String) {
        val locale = Locale(languageCode)
        Locale.setDefault(locale)

        val resources = resources
        val configuration = resources.configuration

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            configuration.setLocale(locale)
        } else {
            configuration.locale = locale
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            createConfigurationContext(configuration)
        } else {
            resources.updateConfiguration(configuration, resources.displayMetrics)
        }
    }
}



<!-- res/layout/activity_main.xml -->

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/hello_world"
        android:layout_centerInParent="true"/>
    
    <!-- Add other UI elements as needed -->

</RelativeLayout>




https://github.com/MostafaTaghipour/LocaleManager
nhabsns



class MainActivity : AppCompatActivity() {

    private val localeHelper by lazy { LocaleHelper(this) }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val welcomeText = localeHelper.getLocalizedResource("welcome_message")
        val textView = findViewById<TextView>(R.id.welcome_text)
        textView.text = welcomeText

        val settingsButton = findViewById<Button>(R.id.settings_button)
        settingsButton.setOnClickListener {
            startActivity(Intent(this, SettingsActivity::class.java))
        }
    }
}



<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/welcome_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/welcome_message" />

    <Button
        android:id="@+id/settings_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/settings" />

</LinearLayout>




<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="welcome_message">Welcome to our app!</string>
    <string name="settings">Settings</string>
</resources>



<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="welcome_message">Bienvenue dans notre application!</string>
    <string name="settings">Paramètres</string>
</resources>



<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="welcome_message">¡Bienvenido a nuestra aplicación!</string>
    <string name="settings">Ajustes</string>
</resources>
nskkss


class MainActivity : AppCompatActivity() {

    private var currentLocale: Locale = Locale.getDefault()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        updateAppLanguage(currentLocale)

        val languageRadioGroup = findViewById<RadioGroup>(R.id.language_radio_group)
        languageRadioGroup.setOnCheckedChangeListener { _, checkedId ->
            val radioButton = languageRadioGroup.findViewById<RadioButton>(checkedId)
            val selectedLanguage = radioButton.text.toString()

            val newLocale = Locale(selectedLanguage)
            if (newLocale != currentLocale) {
                updateAppLanguage(newLocale)
                currentLocale = newLocale
                recreate() // Recreate the activity to apply the new locale
            }
        }
    }

    private fun updateAppLanguage(locale: Locale) {
        val resources = resources
        val configuration = resources.configuration
        configuration.setLocale(locale)
        resources.updateConfiguration(configuration, resources.displayMetrics)

        // Update UI elements based on the new locale
        val welcomeText = getString(R.string.welcome_message)
        val textView = findViewById<TextView>(R.id.welcome_text)
        textView.text = welcomeText
    }
}


<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <RadioGroup
        android:id="@+id/language_radio_group"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content">

        <RadioButton
            android:id="@+id/radio_english"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="English" />

        <RadioButton
            android:id="@+id/radio_french"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="French" />

        <RadioButton
            android:id="@+id/radio_spanish"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Spanish" />
    </RadioGroup>

    <TextView
        android:id="@+id/welcome_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/welcome_message" />

</LinearLayout>
