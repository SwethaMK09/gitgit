can you help me with my kotlin android studio project.i used camera2 api in this app the front camera and back camera opens simultaneously and it works fine but i want to insert another logic. if i click on front camera texture view it should open a full screen front camera and if i click on the full screen front camera it should go back to dual camera and if i click on back camera it should open full screen back camera and if i clcik on full screen back camera it should go to dual camera page. also my device is pixel. what i already have is a half screen view of both cameras now i want a full screen view of front and full screen view of back camera. i am using a own camera app not device camera also i will provied my dual camera project code and a sample normal full screen camera app which uses camera manager but it opens device camera so keep this camera project as reference and implement all the logic to open full screen front and back in my dual camera project please 
use camera2 api make sure the camera app works same like a device camera app when its in full screen i am using pixel6 pro api 34 make the full screen ratio accordingly so it doesnt look like a streached view


Dual Camera Project:

main activity:
package com.example.multicam
 
import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import android.content.pm.PackageManager
import android.graphics.SurfaceTexture
import android.hardware.camera2.CameraAccessException
import android.hardware.camera2.CameraCaptureSession
import android.hardware.camera2.CameraCharacteristics
import android.hardware.camera2.CameraDevice
import android.hardware.camera2.CameraManager
import android.os.Bundle
import android.util.Log
import android.util.Size
import android.view.Surface
import android.view.TextureView
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import kotlin.math.abs
 
class MainActivity : AppCompatActivity() {
 
    private lateinit var cameraManager: CameraManager
    private lateinit var textureViewFront: TextureView
    private lateinit var textureViewBack: TextureView
 
    private val cameraPermissionCode = 123
 
    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
 
        cameraManager = getSystemService(Context.CAMERA_SERVICE) as CameraManager
        textureViewFront = findViewById(R.id.textureViewFront)
        textureViewBack = findViewById(R.id.textureViewBack)
 
        checkCameraPermissions()
 
        try {
            val cameraIdList = cameraManager.cameraIdList
            val rearCameraId = cameraIdList.firstOrNull { id ->
                cameraManager.getCameraCharacteristics(id)
                    .get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_BACK
            }
            val frontCameraId = cameraIdList.firstOrNull { id ->
                cameraManager.getCameraCharacteristics(id)
                    .get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_FRONT
            }
 
            if (rearCameraId != null && frontCameraId != null) {
                openCamera(frontCameraId, textureViewFront)
                openCamera(rearCameraId, textureViewBack)
            } else {
                Log.e("CameraError", "Front or Rear camera not found.")
            }
        } catch (e: CameraAccessException) {
            Log.e("CameraError", "Error accessing camera: ${e.message}")
        }
    }
 
    private fun openCamera(cameraId: String, textureView: TextureView) {
        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.CAMERA
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            try {
                cameraManager.openCamera(cameraId, object : CameraDevice.StateCallback() {
                    override fun onOpened(camera: CameraDevice) {
                        configureCamera(camera, textureView)
                    }
 
                    override fun onDisconnected(camera: CameraDevice) {
                        camera.close()
                    }
 
                    override fun onError(camera: CameraDevice, error: Int) {
                        camera.close()
                        Log.e("CameraError", "Error opening camera: $error")
                    }
                }, null)
            } catch (e: CameraAccessException) {
                Log.e("CameraError", "Error opening camera: ${e.message}")
            }
        }
    }
 
    private fun configureCamera(camera: CameraDevice, textureView: TextureView) {
        val surfaceTexture = textureView.surfaceTexture
        val previewSize = chooseOptimalSize(camera.id, textureView.width, textureView.height)
 
        surfaceTexture?.setDefaultBufferSize(previewSize.width, previewSize.height)
        val surface = Surface(surfaceTexture)
 
        val captureRequestBuilder =
            camera.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW).apply {
                addTarget(surface)
            }
 
        camera.createCaptureSession(listOf(surface), object : CameraCaptureSession.StateCallback() {
            override fun onConfigured(session: CameraCaptureSession) {
                session.setRepeatingRequest(captureRequestBuilder.build(), null, null)
            }
 
            override fun onConfigureFailed(session: CameraCaptureSession) {
                Log.e("CameraError", "Failed to configure camera session.")
            }
        }, null)
    }
 
    private fun chooseOptimalSize(cameraId: String, width: Int, height: Int): Size {
        try {
            val characteristics = cameraManager.getCameraCharacteristics(cameraId)
            val streamConfigurationMap =
                characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
                    ?: throw RuntimeException("Cannot get available preview sizes")
 
            val sizes = streamConfigurationMap.getOutputSizes(SurfaceTexture::class.java)
 
            // Choose an optimal size based on your requirements.
            // For simplicity, you can choose the size with the closest aspect ratio to the given width and height.
            val targetRatio = width.toDouble() / height
            var optimalSize: Size? = null
            var minDiff = Double.MAX_VALUE
 
            for (size in sizes) {
                val ratio = size.width.toDouble() / size.height
                val diff = abs(ratio - targetRatio)
                if (diff < minDiff) {
                    optimalSize = size
                    minDiff = diff
                }
            }
 
            return optimalSize ?: throw RuntimeException("Cannot find suitable preview size")
        } catch (e: CameraAccessException) {
            throw RuntimeException("Error getting camera characteristics: ${e.message}")
        }
    }
    private fun checkCameraPermissions() {
        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.CAMERA
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.CAMERA),
                cameraPermissionCode
            )
        }
    }
 
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == cameraPermissionCode) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted, proceed with camera initialization
                // For simplicity, you can recreate the activity to initialize cameras
                recreate()
            } else {
                // Permission denied, handle accordingly
                Log.e("PermissionError", "Camera permission denied.")
            }
        }
    }
}
 
 
activiy_main.xml:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">
 
    <TextureView
        android:id="@+id/textureViewFront"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        />
 
    <TextureView
        android:id="@+id/textureViewBack"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1" />
 
</LinearLayout>
 
manifest:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
 
    <uses-permission android:name="android.permission.CAMERA" />
<application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Multicam"
        tools:targetApi="31">
<activity
            android:name=".MainActivity"
            android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
 
                <category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
 
</manifest>
 
build gradle(app):
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}
 
android {
    namespace = "com.example.multicam"
    compileSdk = 34
 
    defaultConfig {
        applicationId = "com.example.multicam"
        minSdk = 33
        targetSdk = 33
        versionCode = 1
        versionName = "1.0"
 
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }
 
    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
 
dependencies {
 
    implementation("androidx.core:core-ktx:1.9.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
}
 
build.gradle(project):
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id("com.android.application") version "8.1.3" apply false
    id("org.jetbrains.kotlin.android") version "1.9.0" apply false
}

Normal Camera Project:

Main Activity: just keep this as reference and do the full screen logic
package com.example.mytaskcamera

import android.content.ActivityNotFoundException
import android.os.Bundle
import android.provider.MediaStore
import android.widget.Button
import android.content.Intent
import android.view.View
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.mytaskcamera.ui.theme.MyTaskCameraTheme

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        val myButton: Button = findViewById(R.id.myButton)
        myButton.setOnClickListener {
            myCamera()
            myMessage("Button has been clicked")
        }

    }

    private fun myCamera() {
        val REQUEST_IMAGE_CAPTURE=1
        val takePictureIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        try {
            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE)
        } catch (e: ActivityNotFoundException) {
        }
    }

    private fun myMessage(message: String) {

        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()

    }


}
