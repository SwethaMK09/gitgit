private fun setFullScreenView(textureView: TextureView, isFullScreen: Boolean) {
    if (isFullScreen) {
        val displayMetrics = resources.displayMetrics
        val screenWidth = displayMetrics.widthPixels
        val screenHeight = displayMetrics.heightPixels

        // Set a fixed width and height for dual cameras (adjust as needed)
        val dualCameraWidth = screenWidth / 2
        val dualCameraHeight = screenHeight / 2

        if (textureView == textureViewFront) {
            // Calculate the width and height to maintain the camera preview's aspect ratio
            val aspectRatio = dualCameraWidth.toFloat() / dualCameraHeight.toFloat()
            val calculatedWidth = min(screenWidth, (screenHeight * aspectRatio).toInt())
            val calculatedHeight = min(screenHeight, (screenWidth / aspectRatio).toInt())

            textureView.layoutParams =
                LinearLayout.LayoutParams(
                    calculatedWidth,
                    calculatedHeight
                )
            textureViewBack.visibility = View.GONE
        } else {
            textureView.layoutParams =
                LinearLayout.LayoutParams(
                    dualCameraWidth,
                    dualCameraHeight
                )
            textureViewFront.visibility = View.GONE
        }
    } else {
        // Set the layout parameters for dual-camera views (fixed width and height)
        textureViewFront.layoutParams =
            LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT,
                1f
            )
        textureViewBack.layoutParams =
            LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT,
                1f
            )
        textureViewFront.visibility = View.VISIBLE
        textureViewBack.visibility = View.VISIBLE
    }
}




<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <TextureView
        android:id="@+id/textureViewFront"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:onClick="onClickTextureView" />

    <TextureView
        android:id="@+id/textureViewBack"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:onClick="onClickTextureView" />

</LinearLayout>



package com.example.multicam

import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import android.content.pm.PackageManager
import android.graphics.SurfaceTexture
import android.hardware.camera2.*
import android.os.Bundle
import android.util.Log
import android.util.Size
import android.view.Surface
import android.view.TextureView
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.util.*
import kotlin.math.abs
import kotlin.math.min

class MainActivity : AppCompatActivity() {

    private lateinit var cameraManager: CameraManager
    private lateinit var textureViewFront: TextureView
    private lateinit var textureViewBack: TextureView

    private val cameraPermissionCode = 123

    private var isFullScreenFront = false
    private var isFullScreenBack = false

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        cameraManager = getSystemService(Context.CAMERA_SERVICE) as CameraManager
        textureViewFront = findViewById(R.id.textureViewFront)
        textureViewBack = findViewById(R.id.textureViewBack)

        checkCameraPermissions()

        setCameraListeners()
        openDualCameras()
    }

    private fun setCameraListeners() {
        textureViewFront.setOnClickListener { switchToFullScreen(textureViewFront) }
        textureViewBack.setOnClickListener { switchToFullScreen(textureViewBack) }
    }

    private fun switchToFullScreen(textureView: TextureView) {
        when (textureView) {
            textureViewFront -> {
                isFullScreenFront = !isFullScreenFront
                setFullScreenView(textureViewFront, isFullScreenFront)
            }
            textureViewBack -> {
                isFullScreenBack = !isFullScreenBack
                setFullScreenView(textureViewBack, isFullScreenBack)
            }
        }
    }

//
//private fun setFullScreenView(textureView: TextureView, isFullScreen: Boolean) {
//    if (isFullScreen) {
//        val displayMetrics = resources.displayMetrics
//        val screenWidth = displayMetrics.widthPixels
//        val screenHeight = displayMetrics.heightPixels
//
//        textureView.layoutParams =
//            LinearLayout.LayoutParams(
//                screenWidth, // Set the device's screen width for full-screen view
//                screenHeight // Set the device's screen height for full-screen view
//            )
//
//        if (textureView == textureViewFront) {
//            textureViewBack.visibility = View.GONE
//        } else {
//            textureViewFront.visibility = View.GONE
//        }
//    } else {
//        // Set the layout parameters for dual-camera views (adjust as needed)
//        textureView.layoutParams =
//            LinearLayout.LayoutParams(
//                ViewGroup.LayoutParams.MATCH_PARENT,
//                0,
//                1f
//            )
//        textureViewFront.visibility = View.VISIBLE
//        textureViewBack.visibility = View.VISIBLE
//    }
//}
//

    private fun setFullScreenView(textureView: TextureView, isFullScreen: Boolean) {
        if (isFullScreen) {
            val displayMetrics = resources.displayMetrics
            val screenWidth = displayMetrics.widthPixels
            val screenHeight = displayMetrics.heightPixels

            // Set a fixed width and height for dual cameras (adjust as needed)
            val dualCameraWidth = screenWidth / 2
            val dualCameraHeight = screenHeight / 2

            if (textureView == textureViewFront) {
                // Calculate the width and height to maintain a 16:9 aspect ratio
                val aspectRatio = 16f / 9f
                val calculatedWidth = min(screenWidth, (screenHeight * aspectRatio).toInt())
                val calculatedHeight = min(screenHeight, (screenWidth / aspectRatio).toInt())

                textureView.layoutParams =
                    LinearLayout.LayoutParams(
                        calculatedWidth,
                        calculatedHeight
                    )
                textureViewBack.visibility = View.GONE
            } else {
                textureView.layoutParams =
                    LinearLayout.LayoutParams(
                        dualCameraWidth,
                        dualCameraHeight
                    )
                textureViewFront.visibility = View.GONE
            }
        } else {
            // Set the layout parameters for dual-camera views (fixed width and height)
            textureViewFront.layoutParams =
                LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    1f
                )
            textureViewBack.layoutParams =
                LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    1f
                )
            textureViewFront.visibility = View.VISIBLE
            textureViewBack.visibility = View.VISIBLE
        }
    }

    private fun openDualCameras() {
        try {
            val cameraIdList = cameraManager.cameraIdList
            val rearCameraId = cameraIdList.firstOrNull { id ->
                cameraManager.getCameraCharacteristics(id)
                    .get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_BACK
            }
            val frontCameraId = cameraIdList.firstOrNull { id ->
                cameraManager.getCameraCharacteristics(id)
                    .get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_FRONT
            }

            if (rearCameraId != null && frontCameraId != null) {
                openCamera(frontCameraId, textureViewFront)
                openCamera(rearCameraId, textureViewBack)
            } else {
                Log.e("CameraError", "Front or Rear camera not found.")
            }
        } catch (e: CameraAccessException) {
            Log.e("CameraError", "Error accessing camera: ${e.message}")
        }
    }

    private fun openCamera(cameraId: String, textureView: TextureView) {
        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.CAMERA
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            try {
                cameraManager.openCamera(cameraId, object : CameraDevice.StateCallback() {
                    override fun onOpened(camera: CameraDevice) {
                        configureCamera(camera, textureView)
                    }

                    override fun onDisconnected(camera: CameraDevice) {
                        camera.close()
                    }

                    override fun onError(camera: CameraDevice, error: Int) {
                        camera.close()
                        Log.e("CameraError", "Error opening camera: $error")
                    }
                }, null)
            } catch (e: CameraAccessException) {
                Log.e("CameraError", "Error opening camera: ${e.message}")
            }
        }
    }

    private fun configureCamera(camera: CameraDevice, textureView: TextureView) {
        val surfaceTexture = textureView.surfaceTexture
        val previewSize = chooseOptimalSize(camera.id, textureView.width, textureView.height)

        surfaceTexture?.setDefaultBufferSize(previewSize.width, previewSize.height)
        val surface = Surface(surfaceTexture)

        val captureRequestBuilder =
            camera.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW).apply {
                addTarget(surface)
            }

        camera.createCaptureSession(listOf(surface), object : CameraCaptureSession.StateCallback() {
            override fun onConfigured(session: CameraCaptureSession) {
                session.setRepeatingRequest(captureRequestBuilder.build(), null, null)
            }

            override fun onConfigureFailed(session: CameraCaptureSession) {
                Log.e("CameraError", "Failed to configure camera session.")
            }
        }, null)
    }

    private fun chooseOptimalSize(cameraId: String, width: Int, height: Int): Size {
        try {
            val characteristics = cameraManager.getCameraCharacteristics(cameraId)
            val streamConfigurationMap =
                characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
                    ?: throw RuntimeException("Cannot get available preview sizes")

            val sizes = streamConfigurationMap.getOutputSizes(SurfaceTexture::class.java)

            // Choose an optimal size based on your requirements.
            // For simplicity, you can choose the size with the closest aspect ratio to the given width and height.
            val targetRatio = width.toDouble() / height
            var optimalSize: Size? = null
            var minDiff = Double.MAX_VALUE

            for (size in sizes) {
                val ratio = size.width.toDouble() / size.height
                val diff = abs(ratio - targetRatio)
                if (diff < minDiff) {
                    optimalSize = size
                    minDiff = diff
                }
            }

            return optimalSize ?: throw RuntimeException("Cannot find suitable preview size")
        } catch (e: CameraAccessException) {
            throw RuntimeException("Error getting camera characteristics: ${e.message}")
        }
    }

    private fun checkCameraPermissions() {
        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.CAMERA
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.CAMERA),
                cameraPermissionCode
            )
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == cameraPermissionCode) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted, proceed with camera initialization
                // For simplicity, you can recreate the activity to initialize cameras
                recreate()
            } else {
                // Permission denied, handle accordingly
                Log.e("PermissionError", "Camera permission denied.")
            }
        }
    }

    fun onClickTextureView(view: View) {}

}
